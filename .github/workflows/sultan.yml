name: Sultan
permissions:
  contents: write  # 允许写入存储库内容（用于推送标签）(Allow writing to repository contents (for pushing tags))
  actions: write   # 允许触发工作流(Allows triggering actions)

on:
  workflow_call: # 这允许从另一个工作流调用此工作流(This allows this workflow to be called from another workflow)
    inputs:
      codename:
        required: true
        type: string
      repo:
        required: true
        type: string
      android_version:
        required: true
        type: string
      kernel_version:
        required: true
        type: string
  
jobs:
  build-kernel-sultan-kernelsu-susfs:
    runs-on: ubuntu-latest
    steps:
      - name: 最大化构建空间(Maximize Build Space)
        uses: AdityaGarg8/remove-unwanted-software@v5
        with:
          remove-dotnet: 'true'          # Frees ~2 GB
          remove-android: 'true'         # Frees ~9 GB
          remove-haskell: 'true'         # Frees ~5.2 GB
          remove-codeql: 'true'          # Frees ~5.4 GB
          remove-docker-images: 'true'   # Frees ~3.2 GB
          remove-large-packages: 'true'  # Frees ~3.1 GB
          remove-swapfile: 'true'        # Frees ~4 GB
          remove-cached-tools: 'false'   # Avoid unless confirmed safe
          verbose: 'true'                # Enable detailed logging
          
      - name: 安装依赖(Installing dependencies)
        run: |
          sudo apt update
          sudo apt install -y gcc-aarch64-linux-gnu

      - name: 设置构建环境(Setup Build Environment)
        run: |
          # Clone Google Clang toolchain
          git clone https://github.com/WildKernels/toolchain.git --depth=1 Clang
          
          # Set up PATH and other environment variables
          echo "为 Clang 设置环境变量..."
          echo "CLANG_DIR=$(pwd)/Clang" >> $GITHUB_ENV
          echo "PATH=$(pwd)/Clang/bin:$PATH" >> $GITHUB_ENV
          echo "CC=clang" >> $GITHUB_ENV
          echo "CROSS_COMPILE=aarch64-linux-gnu-" >> $GITHUB_ENV
          echo "CROSS_COMPILE_ARM64=aarch64-linux-gnu-" >> $GITHUB_ENV
          
          # This is the path to the AArch64 compiler, usually `aarch64-linux-gnu-`
          # This triple is required by many build systems
          echo "CLANG_TRIPLE=aarch64-linux-gnu-" >> $GITHUB_ENV
          
          # Verify clang version
          clang --version

      - name: 设置环境变量(Set CONFIG Environment Variable)
        run: |
          CONFIG="${{ inputs.repo }}"
          
          # Set CONFIG as an environment variable for future steps
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV
          
          echo "切换 CONFIG 至: $CONFIG"

      - name: 复制AnyKernel3和其它依赖(Clone AnyKernel3 and Other Dependencies)
        run: |
          echo "复制AnyKernel3和其它依赖..."
          
          ANYKERNEL_BRANCH="sultan-${{ inputs.codename }}"
          SUSFS_BRANCH="gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}"

          # Debug print the branches
          echo "使用的 AnyKernel3 分支: $ANYKERNEL_BRANCH"
          echo "使用的 SUSFS 分支: $SUSFS_BRANCH"

          # Clone repositories using the branch names
          git clone https://github.com/TheWildJames/AnyKernel3.git -b "$ANYKERNEL_BRANCH"
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "$SUSFS_BRANCH"
          git clone https://github.com/TheWildJames/kernel_patches.git
          # git clone https://github.com/kerneltoast/${{ inputs.repo }}
          git clone https://github.com/momojuro/${{ inputs.repo }}           # 更换内核源码
      
      - name: 添加KernelSU(Add KernelSU)
        run: |
          echo "移动到配置目录: $CONFIG..."
          cd "$CONFIG"
          
          echo "添加 KernelSU..."
          curl -LSs "https://raw.githubusercontent.com/WildKernels/Wild_KSU/wild/kernel/setup.sh" | bash -s wild

      - name: 添加SUSFS补丁(Apply SUSFS Patches)
        run: |
          echo "移动到配置目录: $CONFIG..."
          cd "$CONFIG"
          
          echo "添加 SUSFS 补丁..."
          
          # Copy SUSFS patches
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch ./
          cp ../susfs4ksu/kernel_patches/fs/* ./fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./include/linux/

          cd ./Wild_KSU
          
          echo "添加 wild SUSFS 补丁..."
          cp ../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./
          patch -p1 --forward < 10_enable_susfs_for_ksu.patch || true

          echo "应用 wild SUSFS Fix patches..."
          cp ../../kernel_patches/wild/susfs_fix_patches/v1.5.9/fix_core_hook.c.patch ./
          patch -p1 --forward < fix_core_hook.c.patch

          cp ../../kernel_patches/wild/susfs_fix_patches/v1.5.9/fix_rules.c.patch ./
          patch -p1 --forward < fix_rules.c.patch

          cp ../../kernel_patches/wild/susfs_fix_patches/v1.5.9/fix_sucompat.c.patch ./
          patch -p1 --forward < fix_sucompat.c.patch

          cp ../../kernel_patches/wild/susfs_fix_patches/v1.5.9/fix_kernel_compat.c.patch ./
          patch -p1 --forward < fix_kernel_compat.c.patch
          
          # Change to common directory and apply SUSFS patch
          cd ..
          patch -p1 < 50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch || true
          cp ../kernel_patches/sultan/sys.c_fix.patch ./
          patch -p1 --fuzz=3 < sys.c_fix.patch

      - name: 添加KSU Hooks(Apply KSU Hooks)
        run: |
          echo "移动到配置目录: $CONFIG..."
          cd "$CONFIG"
          # Apply additional patch
          cp ../kernel_patches/wild/hooks/syscall_hooks.patch ./
          patch -p1 -F 3 < syscall_hooks.patch
          
      - name: 添加隐藏补丁(Apply Hide Stuff Patches)
        run: |
          echo "移动到配置目录: $CONFIG..."
          cd "$CONFIG"
          # Apply additional patch
          cp ../kernel_patches/69_hide_stuff.patch ./
          patch -p1 -F 3 < 69_hide_stuff.patch

      - name: 添加SUSFS初始设置(Add SUSFS Configuration Settings)
        run: |
          echo "移动到配置目录: $CONFIG..."
          cd "$CONFIG"
          
          echo "将配置设置添加到 ${{ inputs.codename }}_defconfig..."

          # Add KSU configuration settings
          echo "CONFIG_KSU=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_KPROBES_HOOK=n" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          
          # Add SUSFS configuration settings
          echo "CONFIG_KSU_SUSFS=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          
          # Add additional tmpfs config setting
          echo "CONFIG_TMPFS_XATTR=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig

          # Add additional config setting
          echo "CONFIG_IP_NF_TARGET_TTL=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_IP6_NF_TARGET_HL=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_IP6_NF_MATCH_HL=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig

          # Add BBR Config
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig 
          echo "CONFIG_TCP_CONG_BBR=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_NET_SCH_FQ=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_TCP_CONG_BIC=n" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_TCP_CONG_WESTWOOD=n" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_TCP_CONG_HTCP=n" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig

      - name: 运行 sed 和 perl 命令(Run sed and perl Commands)
        run: |
          echo "移动到配置目录: $CONFIG..."
          cd "$CONFIG"
          
          echo "运行 sed 命令..."
          sed -i 's/CONFIG_LOCALVERSION="-Sultan"/CONFIG_LOCALVERSION="-Wild"/' ./arch/arm64/configs/${{ inputs.codename }}_defconfig

      - name: 构建内核(Build the Kernel)
        run: |
          echo "移动到配置目录: $CONFIG..."
          cd "$CONFIG"
          
          echo "构建内核..."
          # Using the variables set in the 'Setup Build Environment' step
          make ${{ inputs.codename }}_defconfig
          make -j$(nproc --all) CC=clang CROSS_COMPILE=aarch64-linux-gnu-

      - name: 复制镜像(Copy Images)
        run: |
          echo "移动到配置目录: $CONFIG..."
          cd "$CONFIG"

          echo "复制 Image.lz4 并连接 DTB 文件..."
          cp ./out/arch/arm64/boot/Image.lz4 ../AnyKernel3/Image.lz4
          cat ./out/google-devices/gs201/dts/*.dtb > ../AnyKernel3/dtb
          #cp ./out/google-devices/gs201/dts/dtbo.img ../AnyKernel3/dtbo.img

      - name: 创建ZIP文件(Create ZIP Files for Different Formats)
        run: |
          echo "导航至 AnyKernel3 目录..."
          cd ./AnyKernel3

          # Zip the files in the AnyKernel3 directory with a new naming convention
          ZIP_NAME="${{ inputs.codename }}_A16_Sultan_KSUN_SUSFS.zip"
          echo "创建ZIP文件 $ZIP_NAME..."
          zip -r "../$ZIP_NAME" ./*
          
      - name: 上传构建完成的文件(Upload Build Artifacts)
        uses: actions/upload-artifact@v4
        with:
          name: kernel-${{ inputs.codename }}
          path: |
            *.zip
